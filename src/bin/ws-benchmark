#!/bin/bash

# [2008.10.22] I'm considering switching the benchmarks over to a
# slightly more modular/declarative structure.  Rather than having
# scripts that run whole sets of benchmarks directly, I'm going to
# make separate .bench files.

# These .bench files are scripts that can be sourced from any
# directory.  They assume certain environment variables (WAVESCRIPTD).
# They establish some prerequisites (like sample data), and they set
# certain environment variables that allow the test harness to run the
# benchmark.  Decisions about which benchmarks to run and where to
# send the output are left up to the test harness.

# Variables set by .bench: 
#   DIRECTORY
#   FILE 
#   TUPLES
#   BACKENDS -- optional, overwrites default

# This script is one such test harness:

# Usage:
#  run_benchmarks file1.bench file2.bench ...

# Outputs: 
#  writes RESULTS.txt RESULTS.tex and plot.gp to the current directory.
#  creates a "benchlogs" directory within the current directory.

# Environment variables:
#  BACKENDS -- optional, overwrites default of all backends


DEFAULTBACKENDS=$BACKENDS
#BENCHES=$1

FLAGS=`getopt -a -l "o:" -o ":" -- "$@"`
eval set -- "$FLAGS"

# Set a default:
BASEOUTPUT=BENCHRESULTS
while true;  do 
 case $1 in 
   # Sadly duplicating the COPTFLAG business because no way for "wsc" to pass the env vars back up.
   "--o" ) shift; BASEOUTPUT=$1; shift;;
   "--"  ) shift; BENCHES=$*; break;;
   *) echo "  Unhandled option: $1"; exit 1;;
 esac;
done

#echo BENCHES $BENCHES BASE $BASEOUTPUT


START=`pwd`
LOGS="$START/benchlogs/"

OUT=$START/$BASEOUTPUT.txt
TEX=$START/$BASEOUTPUT.tex
PLOT=$START/$BASEOUTPUT.gp

## ================================================================================ ##

# Load the functions for actually driving the benchmarks:
source $WAVESCRIPTD/benchmarks/shared.sh

rm -f $OUT $TEX $PLOT
rm -rf $LOGS
mkdir -p $LOGS

## ================================================================================ ##

if [ "$BENCHES" = "" ];
then echo "Usage: ws-benchmarks file.bench ..."; exit 1; fi

# Grab the BACKENDS variable from the first benchmark.
#eval set -- "$BENCHES"
#source $1
#FIRSTBACKENDS=$BACKENDS

first_time=""
for BENCH in $BENCHES; do
  # Clear the variables that might get set by the .bench file:
  unset DIRECTORY
  unset FILE
  unset TUPLES
  
  #BENCHMARKS=$DEFAULTBACKENDS

  echo;echo;echo " *** Running benchmark: $BENCH ***"; echo; 

  # Load the .bench file:
  #============================================================#
  source $BENCH
  ## TEMP ##
  #BACKENDS=" mltonO3 "
  #============================================================#

  if [ "$first_time" = "" ]; 
  then first_time="no"; 
       FIRSTBACKENDS=$BACKENDS; 
       print_results_header $OUT
  fi 
  if [ "$FIRSTBACKENDS" != "$BACKENDS" ];
  then echo "Mismatching BACKENDS lists between two .bench files: ";
       echo "  $FIRSTBACKENDS";
       echo "  $BACKENDS";
       exit 1;
  fi

  if [ "$TUPLES" = "" ];
  then echo "Error: $BENCH file must set TUPLES variable."; exit 1; fi
  if [ "$FILE" = "" ];
  then echo "Error: $BENCH file must set FILE variable."; exit 1; fi
  if [ "$DIRECTORY" = "" ];
  then echo "Error: $BENCH file must set DIRECTORY variable."; exit 1; fi

  echo "## Running benchmark $BENCH for $TUPLES tuples." >> $OUT

  cd $DIRECTORY
  runallbackends $FILE $LOGS __ $TUPLES

  # Currently runallbackends always sends output to RESULTS.txt
  #mv $DIRECTORY/RESULTS.txt $LOGS/$BENCH.results
  cat $DIRECTORY/RESULTS.txt >> $OUT
  rm -f $DIRECTORY/RESULTS.txt

  cd $START  
done

dump_plot_script $PLOT $OUT

echo '\begin{verbatim}'  > $TEX
cat $OUT                >> $TEX
echo '\end{verbatim}'   >> $TEX
