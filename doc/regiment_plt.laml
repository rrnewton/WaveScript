;; This script loads and invokes the schemedoc system to convert a
;; source file into web-based documentation.

(printf "Loading LAML in PLT to elucidate file.\n")(flush-output)

;; The command-line-arguments should consist of the the directory and the filename.
(if (< (length (vector->list (current-command-line-arguments))) 2)
    (error 'regiment.laml "not enough arguments!"))

;; Just load the matcher from source:
; ;(load (string-append (getenv "WAVESCRIPTD") "/src/plt/iu-match.ss"))
; (define origdir (current-directory))
; (current-directory (getenv "WAVESCRIPTD"))
; (current-directory "src/plt/")
; (write (current-directory))(newline)
; (load "./iu-match.ss")
; (require iu-match)
; ;(current-directory origdir)

(require "../src/plt/iu-match.ss")
(require "../src/plt/chez_compat.ss")
(require (lib "process.ss"))

(define file->slist
  (lambda (filename . opts)
    (let ([p (if (input-port? filename) filename
		 (apply open-input-file filename opts))])
      (port->slist p))))
(define port->slist
  (lambda (p)
    (let porttoslistloop ([exp (read p)] [acc '()])
        (if (eof-object? exp)
            (begin (close-input-port p)
                   (reverse! acc))
            (porttoslistloop (read p) (cons exp acc))))))
(define slist->file
  (case-lambda 
   [(slist fn) (slist->file slist fn 'write)]
   [(slist fn method)
    (let ([p (open-output-file fn 'replace)])
      (parameterize ([print-level #f]
		     [print-length #f]
		     [pretty-maximum-lines #f])
	  (for-each (lambda (x) 
		      (case method
			[(write plain) (write x p)(newline p)]
			[(pretty pretty-print) 
			 (parameterize ([print-level #f]
					[print-graph #f])
			   (pretty-print x p))])
		      (newline p))
	    slist))
      (close-output-port p))]))


(load "plt_schemedoc/laml.init")
(load "plt_schemedoc/laml.scm")

;; I thought I could run one script that would process multiple files.  
;; But it looks like that won't work.  LAML causes problems.
#|
(define laml-dir "~/macroprogramming/regiment_alpha/doc/schemedoc/")
(load (string-append laml-dir "laml.scm"))

(define DIR (string-append (getenv "WAVESCRIPTD") "/"))
;(define DIR (string-append (current-directory) "/"))
;(define DIR "/home/newton/regiment_alpha/")
(define WAVESCRIPTFILES
;  (map (lambda (x) (string-append "src/" x))
  '(
    "compiler.ss"
    "regiment.ss"
    ;"regiment_script.ss"
    ))
|#




;(fake-startup-parameters "NOTSETYET" DIR)
(fake-startup-parameters (cadr (vector->list (current-command-line-arguments))) (car (vector->list (current-command-line-arguments))))
(laml-style "xml-in-laml/schemedoc-2/schemedoc")
(define FILE (cadr (vector->list (current-command-line-arguments))))

;; Now actually generate pages:
;(for-each 
;    (lambda (FILE)
      (printf "------------------------------------------------------------------------------\n")
      (printf "Generating documentation for Regiment source file: ~s\n" FILE)

;      (fake-startup-parameters FILE DIR)
;      (laml-style "xml-in-laml/schemedoc-2/schemedoc")

      (manual
       (manual-front-matters
	'documentation-commenting-style "multi-semicolon" 
	;'documentation-commenting-style "documentation-mark"

	'laml-resource "false"
	'css-prestylesheet "compact"
	'css-stylesheet "original"
	'css-stylesheet-copying "true"
	'scheme-source-linking "true"
;	'source-destination-delta "doc/html/"
;	'source-destination-delta "man/"
;	'source-destination-delta "../doc/"
;	'scheme-report "include"

;	(manual-title "Regiment Compiler Manual")
	(manual-author "Ryan Newton" "" )
	(manual-affiliation "Computer Science and Artificial Intelligence Laboratory" "MIT" "")

	(scheme-source-linking-manual "LAML Fundamental lib"
				      'key "laml"  
				      'file-path "./schemedoc/man/laml"
				      )

	(scheme-source-linking-manual "LAML general lib"
				      'key "general"  
				      'file-path "./schemedoc/lib/man/general"
				      )

	)

       (manual-from-scheme-file 'src FILE))
;       )
;  WAVESCRIPTFILES)

;(printf "------------------------------------------------------------------------------\n")
;(printf "Done generating Regiment documentation.\n")




#| 
(load (string-append laml-dir "laml.scm"))

(define RRNFILE "compiler.ss")
(fake-startup-parameters RRNFILE (string-append (current-directory) "/"))

(laml-style "xml-in-laml/schemedoc-2/schemedoc")

(manual
  (manual-front-matters
    (manual-title "Regiment Source Documentation")
    (manual-author "Ryan Newton")
    (manual-affiliation "MIT CSAIL")
    (manual-abstract "Some abstract. As an example we extract
                      interface documention from the color library.")

    'laml-resource "false"
    'css-prestylesheet "compact"
    'css-stylesheet "original"
    'css-stylesheet-copying "true"
    'documentation-commenting-style "documentation-mark"
  )

  (manual-from-scheme-file 'src RRNFILE)
)
|#

;; REDEFINE THIS NEEDS THE RIGHT EVAL ORDER:
#;
(define map 
  (case-lambda 
    [(f ls)
     (let loop ((ls ls))
       (if (null? ls) '()
	   (let ((v (f (car ls))))
	     (cons v (loop (cdr ls))))))]
    [(f . lsts)
     (let loop ([lsts lsts])
       (cond 
	[(#%andmap null? lsts) '()]
	[(#%ormap null? lsts) 
	 (error 'map "ran out of items in some list args but not others: ~a" lsts)]
	[else (let ((v (apply f (#%map car lsts))))
		(cons v (loop (#%map cdr lsts))))]))]))
